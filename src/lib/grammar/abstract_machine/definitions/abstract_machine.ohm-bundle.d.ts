// AUTOGENERATED FILE
// This file was generated from abstract_machine.ohm by `ohm generateBundles`.

import {
	BaseActionDict,
	Grammar,
	IterationNode,
	Node,
	NonterminalNode,
	Semantics,
	TerminalNode
} from 'ohm-js';

export interface ABSTRACT_MACHINEActionDict<T> extends BaseActionDict<T> {
	Start?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	Program_sequence?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
	Program_instruction?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	Program?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	Instruction_push_number?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction_push_bool?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction_operation?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	Instruction_load?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction_store?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction_jump?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction_jump_if_false?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: TerminalNode,
		arg2: NonterminalNode,
		arg3: TerminalNode
	) => T;
	Instruction?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	operation_add?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_sub?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_mult?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_eq?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_gt?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_not?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_and?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation_or?: (this: NonterminalNode, arg0: TerminalNode) => T;
	operation?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	bool?: (this: NonterminalNode, arg0: TerminalNode) => T;
	var?: (this: NonterminalNode, arg0: IterationNode) => T;
	number_negative?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
	number_positive?: (this: NonterminalNode, arg0: IterationNode) => T;
	number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
	comment?: (
		this: NonterminalNode,
		arg0: TerminalNode,
		arg1: IterationNode,
		arg2: TerminalNode
	) => T;
	space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
}

export interface ABSTRACT_MACHINESemantics extends Semantics {
	addOperation<T>(name: string, actionDict: ABSTRACT_MACHINEActionDict<T>): this;
	extendOperation<T>(name: string, actionDict: ABSTRACT_MACHINEActionDict<T>): this;
	addAttribute<T>(name: string, actionDict: ABSTRACT_MACHINEActionDict<T>): this;
	extendAttribute<T>(name: string, actionDict: ABSTRACT_MACHINEActionDict<T>): this;
}

export interface ABSTRACT_MACHINEGrammar extends Grammar {
	createSemantics(): ABSTRACT_MACHINESemantics;
	extendSemantics(superSemantics: ABSTRACT_MACHINESemantics): ABSTRACT_MACHINESemantics;
}

declare const grammar: ABSTRACT_MACHINEGrammar;
export default grammar;
